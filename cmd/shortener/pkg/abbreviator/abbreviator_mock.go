// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nikishin42/shortener/cmd/shortener/pkg/abbreviator (interfaces: AbbreviatorI)

// Package abbreviator is a generated GoMock package.
package abbreviator

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAbbreviatorI is a mock of AbbreviatorI interface.
type MockAbbreviatorI struct {
	ctrl     *gomock.Controller
	recorder *MockAbbreviatorIMockRecorder
}

// MockAbbreviatorIMockRecorder is the mock recorder for MockAbbreviatorI.
type MockAbbreviatorIMockRecorder struct {
	mock *MockAbbreviatorI
}

// NewMockAbbreviatorI creates a new mock instance.
func NewMockAbbreviatorI(ctrl *gomock.Controller) *MockAbbreviatorI {
	mock := &MockAbbreviatorI{ctrl: ctrl}
	mock.recorder = &MockAbbreviatorIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAbbreviatorI) EXPECT() *MockAbbreviatorIMockRecorder {
	return m.recorder
}

// CreateID mocks base method.
func (m *MockAbbreviatorI) CreateID(arg0 []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateID indicates an expected call of CreateID.
func (mr *MockAbbreviatorIMockRecorder) CreateID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateID", reflect.TypeOf((*MockAbbreviatorI)(nil).CreateID), arg0)
}
